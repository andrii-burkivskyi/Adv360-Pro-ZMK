#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#define TAPPING_TERM 210
#define SHIFT_TAP    170
#define QUICK_TAP    105

#define default_layer 0
#define KEYPAD_LAYER   1
#define navigation   2
#define ls_lc   3
#define ls_la   4
#define alternative_layer   5

#define HRML(k1,k2,k3,k4) &lmt LCTRL k1  &lmt LALT k2  &lmt LGUI k3  &lst LSHFT k4
#define HRMR(k1,k2,k3,k4) &rst RSHFT k1  &rmt RGUI k2  &rmt RALT k3  &rmt RCTRL k4

#define HOLD_TAP(name, tap_flavor, tap_term, ...) \
name: name##_hold_tap {                       \
    label           = #name;                  \
    flavor          = #tap_flavor;            \
    compatible      = "zmk,behavior-hold-tap";\
    tapping-term-ms = <tap_term>;             \
    quick-tap-ms    = <QUICK_TAP>;            \
    #binding-cells  = <2>;                    \
    bindings        = <&kp>, <&kp>;           \
    __VA_ARGS__                               \
};
#define L_SHIFT 46
#define R_SHIFT 59
#define L_KEYS /*1*/0 1 2 3 4 5 6 /*2*/14 15 16 17 18 19 20 /*3*/28 29 30 31 32 33 34 35 36 /*4*/46 47 48 49 50 51 52 /*5*/60 61 62 63 64 65 66 67
#define R_KEYS /*1*/7 8 9 10 11 12 13 /*2*/21 22 23 24 25 26 27 /*3*/37 38 39 40 41 42 43 44 45 /*4*/53 54 55 56 57 58 59 /*6*/68 69 70 71 72 73 74 75

#define SEQUENCE_MACRO(name, keys)                  \
    name: name##_macro {                   \
        label = #name;                     \
        compatible = "zmk,behavior-macro"; \
        wait-ms = <1>;                     \
        tap-ms = <1>;                      \
        #binding-cells = <0>;              \
        bindings = <keys>;                 \
    };


&sk {
    release-after-ms = <2000>;
    quick-release;
};

&mt {
  retro-tap;
};


/ {

  behaviors {
    #include "macros.dtsi"
    // Positional hold-tap for non-Shift modifiers
    HOLD_TAP(lmt, tap-preferred, TAPPING_TERM, hold-trigger-key-positions = <L_SHIFT R_KEYS>;)
    HOLD_TAP(rmt, tap-preferred, TAPPING_TERM, hold-trigger-key-positions = <R_SHIFT L_KEYS>;)
    // Positional hold-tap for Shift
    HOLD_TAP(lst, balanced, SHIFT_TAP, hold-trigger-key-positions = <R_KEYS>;)
    HOLD_TAP(rst, balanced, SHIFT_TAP, hold-trigger-key-positions = <L_KEYS>;)
  };

  macros {
    SEQUENCE_MACRO(terminal_next, &kp LS(LC(T)) &kp LS(LC(J)))
    SEQUENCE_MACRO(terminal_prev, &kp LS(LC(T)) &kp LS(LC(K)))
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &none &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &to KEYPAD_LAYER                                                                                     &mo 3 &kp N6 &kp N7 &kp N8    &kp N9   &kp N0   &none
        &kp MINUS   &kp Q     &kp W    &kp E    &kp R      &kp T  &sk LS(LCTRL)                                                                            &kp RBKT &kp Y  &kp U  &kp I     &kp O    &kp P    &kp BSLH
        &kp EQUAL   HRML(&kp A     &kp S    &kp D    &kp F)      &kp G  &kp GRAVE       &kp BSPC &kp LGUI         &kp LALT  &kp SPACE                              &kp LBKT &kp H HRMR(&kp J  &kp K     &kp L    &kp SEMI) &kp SQT
        &kp LSHFT &kp Z     &kp X    &kp C    &kp V      &kp B                             &mo navigation   &mo ls_lc                                      &kp N  &kp M  &kp COMMA &kp DOT  &kp FSLH &kp RSHFT
        &none &none &none &none &none                                     &mt LALT ESC &kp TAB  &mo KEYPAD_LAYER  &mo KEYPAD_LAYER &kp LCTRL &kp ENTER     &kp DOWN &kp UP  &kp LEFT &kp RIGHT &none
      >;
    };
    keypad_layer {
      bindings = <
        &trans &trans &trans &trans &trans &trans  &to default_layer                                        &mo 3 &kp N6 &kp KP_NUM &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp MINUS
        &trans &trans &trans &trans &trans &trans  &trans                                                   &none &kp Y  &kp KP_N7  &kp KP_N8    &kp KP_N9     &kp KP_MINUS    &kp BSLH
        &trans &trans &trans &trans &trans &trans  &bootloader            &trans &trans &trans &trans       &bootloader &kp H  &kp KP_N4  &kp KP_N5    &kp KP_N6     &kp KP_PLUS     &kp SQT
        &trans &trans &trans &trans &trans &trans                          &trans &trans                    &kp N  &kp KP_N1  &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &kp RSHFT
        &trans &trans &trans &trans &trans                   &trans &trans &trans &trans &trans &trans      &kp UP     &kp DOWN     &kp KP_DOT    &kp RBKT        &mo 2
      >;
    };
    navigation {
      bindings = <
        &trans &trans &trans &trans &trans &trans  &trans                                                       &trans &trans &trans &trans &trans  &trans  &trans
        &trans &kp LA(F4) &trans &trans &trans &trans  &trans                                                   &trans &kp LS(LC(TAB)) &kp LA(ESC) &kp LS(LA(ESC)) &kp LC(TAB)  &trans  &trans
        &trans &trans &trans &trans &trans &trans  &kp GRAVE        &trans &trans &trans &trans                    &trans &kp LEFT &kp DOWN &kp UP &kp RIGHT  &trans  &trans
        &trans &trans &trans &trans &trans &trans                      &trans &trans                            &trans &terminal_next &terminal_prev &trans &trans  &trans
        &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans              &trans &trans &trans  &trans  &trans
      >;
    };
    ls_lc {
      bindings = <
        &trans &trans &trans &trans &trans &trans &trans                                                                                                            &trans &trans &trans &trans &trans  &trans  &trans
        &trans &kp LS(LC(Q))     &kp LS(LC(W))    &kp LS(LC(E))    &kp LS(LC(R))      &kp LS(LC(T))  &none                                                          &trans &kp LS(LC(Y)) &kp LS(LC(U)) &kp LS(LC(I)) &kp LS(LC(O)) &kp LS(LC(P)) &kp LS(LC(BSLH)) 
        &trans &kp LS(LC(A))     &kp LS(LC(S))    &kp LS(LC(D))    &kp LS(LC(F))      &kp LS(LC(G))  &kp LS(LC(GRAVE))       &trans &trans &trans &trans            &trans &kp LS(LC(H)) &kp LS(LC(J)) &kp LS(LC(K)) &kp LS(LC(L)) &kp LS(LC(SEMI)) &kp LS(LC(SQT))
        &trans &kp LS(LC(Z))     &kp LS(LC(X))    &kp LS(LC(C))    &kp LS(LC(V))      &kp LS(LC(B))                                 &trans &trans                   &kp LS(LC(N)) &kp LS(LC(M))  &kp LS(LC(COMMA)) &kp LS(LC(DOT))  &kp LS(LC(FSLH)) &kp LS(LC(RSHFT))
        &none &none &none &none &none                                                                        &to default_layer &trans &trans &trans &trans &trans     &trans &trans &trans &trans &trans
      >;
    };
    ls_la {
      bindings = <
        &trans &trans &trans &trans &trans &trans &trans                                                                                                            &trans &trans &trans &trans &trans  &trans  &trans
        &trans &kp LS(LA(Q))     &kp LS(LA(W))    &kp LS(LA(E))    &kp LS(LA(R))      &kp LS(LA(T))  &none                                                          &trans &kp LS(LA(Y)) &kp LS(LA(U)) &kp LS(LA(I)) &kp LS(LA(O)) &kp LS(LA(P)) &kp LS(LA(BSLH)) 
        &trans &kp LS(LA(A))     &kp LS(LA(S))    &kp LS(LA(D))    &kp LS(LA(F))      &kp LS(LA(G))  &kp LS(LA(GRAVE))       &trans &trans &trans &trans            &trans &kp LS(LA(H)) &kp LS(LA(J)) &kp LS(LA(K)) &kp LS(LA(L)) &kp LS(LA(SEMI)) &kp LS(LA(SQT))
        &trans &kp LS(LA(Z))     &kp LS(LA(X))    &kp LS(LA(C))    &kp LS(LA(V))      &kp LS(LA(B))                                 &trans &trans                   &kp LS(LA(N)) &kp LS(LA(M))  &kp LS(LA(COMMA)) &kp LS(LA(DOT))  &kp LS(LA(FSLH)) &kp LS(LA(RSHFT))
        &none &none &none &none &none                                                                        &to default_layer &trans &trans &trans &trans &trans     &trans &trans &trans &trans &trans
      >;
    };
    alternative_layer {
      bindings = <
        &none &none          &none          &none       &none          &none       &none                                                                               &none  &none         &none         &none         &none         &none       &none
        &none &kp LS(N1)     &kp LS(N2)     &kp LS(N3)  &kp LS(N4)     &kp LS(N5)  &none                                                                               &none  &kp LS(N6)    &kp LS(N7)    &kp LS(N8)    &kp LS(N9)    &kp LS(N0)  &none
        &none &kp MINUS      &kp EQUAL      &kp BSPC    &kp GRAVE      &none       &none                       &none  &none  &none  &none                              &none  &none         &kp LBKT      &kp RBKT      &kp BSLH      &kp SQT     &none
        &none &kp LS(MINUS)  &kp LS(EQUAL)  &none       &kp LS(GRAVE)  &none                                          &none  &none                                     &none  &kp LS(LBKT)  &kp LS(RBKT)  &kp LS(BSLH)  &kp LS(SQT)   &none       
        &none &none          &none          &none       &none                                           &none  &none  &none  &none  &none  &none                       &none  &none         &none         &none         &none
      >;
    };
    // fn {
    //   bindings = <
    //     &trans &trans &trans &trans &trans &trans  &trans                                                       &trans &trans &trans &trans &trans  &trans  &trans
    //     &trans &trans &trans &trans &trans &trans  &trans                                                       &trans &trans &trans &trans &trans  &trans  &trans
    //     &trans &trans &trans &trans &trans &trans  &trans        &trans &trans &trans &trans                    &trans &trans &trans &trans &trans  &trans  &trans
    //     &trans &trans &trans &trans &trans &trans                      &trans &trans                            &trans &trans &trans &trans &trans  &trans
    //     &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans              &trans &trans &trans &trans &trans
    //   >;
    // };
  };
};
