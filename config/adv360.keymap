#define default_layer 0
#define keypad   1
#define navigation   2
#define ls_lc   3
#define ls_la   4

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

&sk {
    release-after-ms = <2000>;
    quick-release;
};

&mt {
    retro-tap;
};

/ {

  behaviors {
    #include "macros.dtsi"

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <125>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };
  };

  macros {
    terminal_next: terminal_next {
      label = "terminal_next";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&macro_tap &kp LS(LC(T))> , <&macro_tap &kp LS(LC(J))>;
    };
    terminal_prev: terminal_prev {
      label = "terminal_prev";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&macro_tap &kp LS(LC(T))> , <&macro_tap &kp LS(LC(K))>;
    };
    close_explorer: close_explorer {
      label = "close_explorer";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&macro_tap &kp LS(LC(K))> , <&macro_tap &kp LS(LC(B))>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &none &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &to keypad                                                                         &mo 3 &kp N6 &kp N7 &kp N8    &kp N9   &kp N0   &none
        &kp MINUS   &kp Q     &kp W    &kp E    &kp R      &kp T  &sk LS(LCTRL)                                                                &kp RBKT &kp Y  &kp U  &kp I     &kp O    &kp P    &kp BSLH
        &kp EQUAL   &kp A     &kp S    &kp D    &kp F      &kp G  &kp GRAVE       &kp BSPC &kp LGUI         &kp LALT  &mt LALT SPACE                &kp LBKT &kp H &kp J  &kp K     &kp L    &kp SEMI &kp SQT
        &kp LSHFT &kp Z     &kp X    &kp C    &kp V      &kp B                             &mo navigation   &mo ls_lc                          &kp N  &hm LALT M  &kp COMMA &kp DOT  &kp FSLH &kp RSHFT
        &none &none &none &none &none                                     &kp ESC &kp TAB  &mo keypad       &mo keypad &kp LCTRL &kp ENTER     &kp DOWN &kp UP  &kp LEFT &kp RIGHT &none
      >;
    };
    keypad {
      bindings = <
        &trans &trans &trans &trans &trans &trans  &to default_layer                                        &mo 3 &kp N6 &kp KP_NUM &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp MINUS
        &trans &trans &trans &trans &trans &trans  &trans                                                   &none &kp Y  &kp KP_N7  &kp KP_N8    &kp KP_N9     &kp KP_MINUS    &kp BSLH
        &trans &trans &trans &trans &trans &trans  &bootloader            &trans &trans &trans &trans       &bootloader &kp H  &kp KP_N4  &kp KP_N5    &kp KP_N6     &kp KP_PLUS     &kp SQT
        &trans &trans &trans &trans &trans &trans                          &trans &trans                    &kp N  &kp KP_N1  &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &kp RSHFT
        &trans &trans &trans &trans &trans                   &trans &trans &trans &trans &trans &trans      &kp UP     &kp DOWN     &kp KP_DOT    &kp RBKT        &mo 2
      >;
    };
    navigation {
      bindings = <
        &trans &trans &trans &trans &trans &trans  &trans                                                       &trans &trans &trans &trans &trans  &trans  &trans
        &trans &kp LA(F4) &trans &trans &trans &trans  &trans                                                   &trans &kp LS(LC(TAB)) &kp LA(ESC) &kp LS(LA(ESC)) &kp LC(TAB)  &trans  &trans
        &trans &trans &trans &trans &trans &trans  &kp GRAVE        &trans &trans &trans &trans                    &trans &kp LEFT &kp DOWN &kp UP &kp RIGHT  &trans  &trans
        &trans &trans &trans &trans &trans &trans                      &trans &trans                            &trans &terminal_next &terminal_prev &trans &trans  &trans
        &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans              &trans &trans &trans  &trans  &trans
      >;
    };
    ls_lc {
      bindings = <
        &trans &trans &trans &trans &trans &trans &trans                                                                                                            &trans &trans &trans &trans &trans  &trans  &trans
        &trans &kp LS(LC(Q))     &kp LS(LC(W))    &kp LS(LC(E))    &kp LS(LC(R))      &kp LS(LC(T))  &none                                                          &trans &kp LS(LC(Y)) &kp LS(LC(U)) &kp LS(LC(I)) &kp LS(LC(O)) &kp LS(LC(P)) &kp LS(LC(BSLH)) 
        &trans &kp LS(LC(A))     &kp LS(LC(S))    &kp LS(LC(D))    &kp LS(LC(F))      &kp LS(LC(G))  &kp LS(LC(GRAVE))       &trans &trans &trans &trans            &trans &kp LS(LC(H)) &kp LS(LC(J)) &kp LS(LC(K)) &kp LS(LC(L)) &kp LS(LC(SEMI)) &kp LS(LC(SQT))
        &trans &kp LS(LC(Z))     &kp LS(LC(X))    &kp LS(LC(C))    &kp LS(LC(V))      &kp LS(LC(B))                                 &trans &trans                   &kp LS(LC(N)) &kp LS(LC(M))  &kp LS(LC(COMMA)) &kp LS(LC(DOT))  &kp LS(LC(FSLH)) &kp LS(LC(RSHFT))
        &none &none &none &none &none                                                                        &to default_layer &trans &trans &trans &trans &trans     &trans &trans &trans &trans &trans
      >;
    };
    ls_la {
      bindings = <
        &trans &trans &trans &trans &trans &trans &trans                                                                                                            &trans &trans &trans &trans &trans  &trans  &trans
        &trans &kp LS(LA(Q))     &kp LS(LA(W))    &kp LS(LA(E))    &kp LS(LA(R))      &kp LS(LA(T))  &none                                                          &trans &kp LS(LA(Y)) &kp LS(LA(U)) &kp LS(LA(I)) &kp LS(LA(O)) &kp LS(LA(P)) &kp LS(LA(BSLH)) 
        &trans &kp LS(LA(A))     &kp LS(LA(S))    &kp LS(LA(D))    &kp LS(LA(F))      &kp LS(LA(G))  &kp LS(LA(GRAVE))       &trans &trans &trans &trans            &trans &kp LS(LA(H)) &kp LS(LA(J)) &kp LS(LA(K)) &kp LS(LA(L)) &kp LS(LA(SEMI)) &kp LS(LA(SQT))
        &trans &kp LS(LA(Z))     &kp LS(LA(X))    &kp LS(LA(C))    &kp LS(LA(V))      &kp LS(LA(B))                                 &trans &trans                   &kp LS(LA(N)) &kp LS(LA(M))  &kp LS(LA(COMMA)) &kp LS(LA(DOT))  &kp LS(LA(FSLH)) &kp LS(LA(RSHFT))
        &none &none &none &none &none                                                                        &to default_layer &trans &trans &trans &trans &trans     &trans &trans &trans &trans &trans
      >;
    };
    // fn {
    //   bindings = <
    //     &trans &trans &trans &trans &trans &trans  &trans                                                       &trans &trans &trans &trans &trans  &trans  &trans
    //     &trans &trans &trans &trans &trans &trans  &trans                                                       &trans &trans &trans &trans &trans  &trans  &trans
    //     &trans &trans &trans &trans &trans &trans  &trans        &trans &trans &trans &trans                    &trans &trans &trans &trans &trans  &trans  &trans
    //     &trans &trans &trans &trans &trans &trans                      &trans &trans                            &trans &trans &trans &trans &trans  &trans
    //     &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans              &trans &trans &trans &trans &trans
    //   >;
    // };
  };
};
